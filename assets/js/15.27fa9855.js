(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{390:function(e,t,r){"use strict";r.r(t);var a=r(25),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")]),e._v(" "),r("center",[r("img",{attrs:{src:"https://travis-ci.org/Effective-Quadratures/Effective-Quadratures.svg?branch=master",alt:""}}),e._v(" "),r("a",{attrs:{href:"https://pypi.org/project/equadratures/",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://badge.fury.io/py/equadratures.svg",alt:""}}),r("OutboundLink")],1),e._v(" "),r("img",{attrs:{src:"https://img.shields.io/pypi/pyversions/equadratures.svg",alt:""}}),e._v(" "),r("img",{attrs:{src:"https://img.shields.io/github/stars/Effective-Quadratures/Effective-Quadratures.svg?&logo=github&label=Stars&logoColor=white",alt:""}}),e._v(" "),r("img",{attrs:{src:"https://static.pepy.tech/badge/equadratures/week",alt:""}}),e._v(" "),r("a",{attrs:{href:"https://discourse.effective-quadratures.org",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://img.shields.io/discourse/status?server=https%3A%2F%2Fdiscourse.effective-quadratures.org",alt:""}}),r("OutboundLink")],1)])],1),e._v(" "),r("p",[e._v("Effective Quadratures is a collection of utilities for understanding the input-output nature of models and data. Our tools are powered by our open-source code "),r("code",[e._v("equadratures")]),e._v(". The latest version of the code is "),r("code",[e._v("Narwhal v9.0")]),e._v(". To download and install the code, please use the python package index command:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("pip install equadratures\n")])])]),r("p",[e._v("To set the code up, try the following:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("from equadratures import *\nimport numpy as np\n\ndef my_model(x):\n\treturn x**2 + 0.2 * x - np.sin(x)\n\nparameter = Parameter(distribution='uniform', lower=-1., upper=1., order=3)\nbasis = Basis('univariate')\npoly = Poly(parameter, basis, 'numerical-integration')\npoly.set_model(my_model)\n")])])]),r("footer-component")],1)}),[],!1,null,null,null);t.default=s.exports}}]);