Constructing orthogonal polynomials
========================================
In this tutorial we describe how one can construct orthogonal polynomials in Effective Quadratures. For starters, we consider Legendre polynomials---orthogonal with respect to the uniform weight function. We define a Parameter :math:`s` with :math:`\rho(s) \sim \mathcal{U}[-1,1]`.


.. code::

	from equadratures import *
	import numpy as np
	import matplotlib.pyplot as plt


	order = 5
	s1 = Parameter(lower=-1, upper=1, order=order, distribution='Uniform')

We restrict our attention to the first five orthogonal polynomials, where the parameterized matrix :math:`\mathbf{P}` has the form

.. math::

	\mathbf{P}\left(i,j\right)=\psi_{i}\left(\lambda_{j}\right) \; \; \text{where} \; \; i=1, \ldots, p; \; j = 1, \ldots, N,

where :math:`N` is the number of points :math:`\lambda_{j}` discretizing the domain of :math:`s`, and :math:`p` is the maximum polynomial order, set to 5. Plots of the polynomials are shown below.

.. code::

	myBasis = Basis('univariate')
	myPoly = Poly(s1, myBasis, method='numerical-integration')
	xo = np.linspace(-1., 1, 100)
	P = myPoly.get_poly(xo)

	fig = plt.figure()
	ax = fig.add_subplot(1,1,1)
	plt.plot(xo, P[0,:], lw=2, label='Order 0')
	plt.plot(xo, P[1,:], lw=2, label='Order 1')
	plt.plot(xo, P[2,:], lw=2, label='Order 2')
	plt.plot(xo, P[3,:], lw=2, label='Order 3')
	plt.plot(xo, P[4,:], lw=2, label='Order 4')
	plt.plot(xo, P[5,:], lw=2, label='Order 5')
	plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.30), ncol=3, fancybox=True, shadow=True)
	plt.xlabel('$s$', fontsize=18)
	plt.ylabel('Polynomials', fontsize=18)
	plt.savefig('../Figures/tutorial_3_fig_a.png', dpi=200, bbox_inches='tight')



.. figure:: Figures/tutorial_3_fig_a.png
   :scale: 30 %

   Figure. The first six Legendre polynomials

A few remarks are in order regarding this plot. Standard Legendre polynomials are orthogonal via

.. math::

	\int_{-1}^{1}\psi_{i}\left(s \right)\psi_{j}\left(s \right)ds=\frac{2\delta_{ij}}{2i+1},

where :math:`\delta_{ij}` is the Kronecker delta. In Effective Quadratures, we modify all orthogonal polynomials such that the right hand side of this expression is unity when :math:`i=j`

.. math::

	\frac{1}{2i+1} \int_{-1}^{1}\psi_{i}\left(s\right)\psi_{j}\left(s\right) ds \\
	=\int_{-1}^{1}\frac{1}{\sqrt{2i+1}}\psi_{j}\left(s\right)\frac{1}{\sqrt{2j+1}}\psi_{j}\left(s\right)ds \\
	=\delta ij

Introducing these scaling factors, we now can plot the standard Legendre polynomials; these are reported in the Wikipedia `entry <https://en.wikipedia.org/wiki/Legendre_polynomials>`__.


.. code::

	factor_0 = 1.
	factor_1 = 1.0 / np.sqrt(2.0 * 1.0 + 1.)
	factor_2 = 1.0 / np.sqrt(2.0 * 2.0 + 1.)
	factor_3 = 1.0 / np.sqrt(2.0 * 3.0 + 1.)
	factor_4 = 1.0 / np.sqrt(2.0 * 4.0 + 1.)
	factor_5 = 1.0 / np.sqrt(2.0 * 5.0 + 1.)

	fig = plt.figure()
	ax = fig.add_subplot(1,1,1)
	plt.plot(xo, factor_0 * P[0,:], lw=2, label='Order 0')
	plt.plot(xo, factor_1 * P[1,:], lw=2, label='Order 1')
	plt.plot(xo, factor_2 * P[2,:], lw=2, label='Order 2')
	plt.plot(xo, factor_3 * P[3,:], lw=2, label='Order 3')
	plt.plot(xo, factor_4 * P[4,:], lw=2, label='Order 4')
	plt.plot(xo, factor_5 * P[5,:], lw=2, label='Order 5')
	plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.30), ncol=3, fancybox=True, shadow=True)
	plt.xlabel('$s$', fontsize=18)
	plt.ylabel('Scaled polynomials', fontsize=18)
	plt.savefig('../Figures/tutorial_3_fig_b.png', dpi=200, bbox_inches='tight')

.. figure:: Figures/tutorial_3_fig_b.png
   :scale: 30 %

   Figure. The first six (normalized) Legendre polynomials

	 The full source code for this tutorial can be found `here. <https://github.com/Effective-Quadratures/Effective-Quadratures/blob/master/source/_documentation/codes/tutorial_3.py>`__
